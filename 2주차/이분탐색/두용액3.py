import sys # sys 모듈을 불러온다. sys.stdin.readline을 사용하기 위해서다.
input = sys.stdin.readline # sys.stdin.readline은 input()보다 빠르게 입력을 처리하기 때문에, 메모리 소모량을 줄일 수 있다. 아래 코드에서는 sys.stdin.readline을 input이라는 이름으로 사용한다.

# 사용자 상호작용
용액개수 = int(input()) # 용액의 개수를 입력받는다.
특성값 = list(map(int, input().split())) # 용액의 특성값을 리스트로 입력받는다.
특성값.sort() # 용액의 특성값을 정렬한다. # 이분탐색을 받기 위해서는 정렬이 필수다
절댓값  = float('inf') # 최소 절댓값 합을 무한대로 저장. # 그래야 다른 값과 비교할 때, 무조건 작은 값이 저장된다.
스페셜용액 = (0,0) # 최솟값을 만드는 두 용액의 특성값 # 두 용액의 쌍을 구해야 하므로, 튜플로 선언

# 이분 탐색 기준값 구하기 
# 첫 번째 용액을 하나씩 고정하고, 해당 값과 합쳐서 0에 가까워질 수 있는 용액을  이진 탐색으로 나머지 구간에서 찾는다.
"""
이진 탐색 조건 : 기준값 뒤에 이진 탐색할 대상이 반드시 하나 이상 있어야 함
"""
for 첫번재_용액 in range(용액개수 - 1): # 용액 개수 배열을 순회하면서 첫번째 용액 값을 고정한다. 이 고정값과 나머지 용액을 합쳐서 0에 가까운 값을 찾고 최적쌍을 출력할 것이다.
    첫번째_특성값 = 특성값[첫번재_용액] # 첫번째 용액의 특성값
    pl = 첫번재_용액 + 1 # 기준값의 다음 인덱스를 pl로 설정한다.
    pr = 용액개수 - 1 # 용액의 개수 - 1을 pr로 설정한다. | # 배열의 마지막 값은 N-1이므로 -1 해준다

    # 이분 탐색 시작
    while pl <= pr: # 왼쪽 인덱스가 오른쪽 인덱스보다 작거나 같을 때
        pc = (pl + pr) // 2 # pc 값은 pc = (pl + pr) // 2로 설정하고 
        합 = 첫번째_특성값 + 특성값[pc] # 첫번째 특성값과 pc가 가리키는 특성값의 합을 저장한다.

        if abs(합) < 절댓값: # 현재 합이 더 0에 가까우면 절댓값 갱신
            절댓값 = abs(합) # 절댓값에 최소 절댓값 합을 저장해 절댓값을 갱신하고 
            스페셜용액 = (첫번째_특성값, 특성값[pc]) # 첫번째 특성값과 pc가 가리키는 특성값을 다시 튜플로 저장한다.
        
        # 0이면 최적의 조합이므로 탐색 종료.
        if 합 == 0: #  첫번째_특성값 + 특성값[pc]의 결과가 0이라면 
              break # 탐색을 종료한다.
        if 합 > 0: # 그리고, 합이 0 보다 크면
            pr = pc - 1 # 오른쪽 포인터를 중앙값보다 1 작게 설정한다.
        else: # 그 외의 경우 (합이 0보다 작은 경우에는)
            pl = pc + 1 # 왼쪽 포인터를 중앙값보다 1 크게 설정한다.

# 결과
결과 = sorted(스페셜용액)  #  정렬된 리스트로 반환
print(*결과) # 언팩 후 결과를 출력한다. :: 언팩하지 않으면 (1, 2) 형식의 튜플이 출력됨
"""
이 문제는 서로 다른 두 용액을 섞었을 때, 그 특성값의 합이 0에 가장 가까운 두 용액을 찾는 문제이다.

1. 특성값 리스트를 정렬
2. 리스트에서 첫번째 용액을 선택해 기준값으로 설정하고  pl을 첫번째 용액의 인덱스 + 1로, pr을 용액의 개수 - 1로 설정한 뒤 이분탐색하여 가장 기준값과 합이 0에 가까운 쌍을 찾는다.
3. 이 조합을 스페셜용액에 저장하고 오름차순으로 정렬하여 출력합니다.

"""